{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"nycflights13 3조 보고서(비행)\"\n",
        "author: '3조'\n",
        "format:\n",
        "    revealjs:\n",
        "        logo: pa.jpg\n",
        "        title-slide-attributes:\n",
        "            data-background-image: background.jpg\n",
        "        reference-location: document\n",
        "        footer: 'LS 빅데이터 스쿨 3조 ( 김보경 / 박한슬 / 송성필 / 양현준 )'\n",
        "  \n",
        "      \n",
        "echo: true\n",
        "---\n",
        "\n",
        "## 주제 선정 이유 \n",
        "- 1. 모든 데이터가 3개의 공항에서 생성되었다.\n",
        "JFK(John F. Kennedy International Airport)  \n",
        "LGA(LaGuardia Airport)  \n",
        "EWR(Newark Liberty International Airport)\n",
        "- 2. 출발·도착의 지연이 발생한다면 특정 기간에  \n",
        "과도하게 발생되는 특징이 있을 것이다.\n",
        "- 3. 상기의 결과값에  \n",
        "뉴욕지역의 기후도 영향을 줄 수 있다.\n",
        "\n",
        "---\n",
        "\n",
        "**part1**\n",
        "<br>\n",
        "<br>\n",
        "1-1 월별 출발·도착 지연 분석\n",
        "1-2 월별 출발·도착 지연과 날씨의 관계\n",
        "\n",
        "## 1-1 월별 출발·도착 지연 최빈값"
      ],
      "id": "25341246"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "from nycflights13 import flights, weather\n",
        "import pandas as pd\n",
        "# flights에서 특정 컬럼 추출\n",
        "picked = flights[['arr_delay', 'dep_delay', 'time_hour']]\n",
        "# picked['time_hour']의 타입 변환 (object -> datetime64)\n",
        "picked['time_hour'] = pd.to_datetime(picked['time_hour'])\n",
        "# 월정보 추출\n",
        "picked['month'] = picked['time_hour'].dt.month\n",
        "# 도착 지연 여부[True, False]\n",
        "picked['arr_delay_flag'] = picked['arr_delay'] > 0\n",
        "# 출발 지연 여부[True, False]\n",
        "picked['dep_delay_flag'] = picked['dep_delay'] > 0\n",
        "# 월별 지연 횟수 집계 [도착지연, 출발지연 True값의 합]\n",
        "monthly_delays = picked.groupby('month').agg(\n",
        "    arrival_delays=('arr_delay_flag', 'sum'),\n",
        "    departure_delays=('dep_delay_flag', 'sum')\n",
        ").reset_index()\n",
        "print(monthly_delays)"
      ],
      "id": "1e654989",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ** 도식화**"
      ],
      "id": "87f4b9fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| eval: true\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "# X 축 위치 조정[동시에 출발·도착 지연 표기 위해]\n",
        "x = np.array(monthly_delays['month'])  # 월 (1~12)나열\n",
        "width = 0.4  # 막대 너비\n",
        "# 그래프 그리기 (도착 지연은 왼쪽, 출발 지연은 오른쪽)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(x - width/2, monthly_delays['arrival_delays'],\n",
        "         width=width, label='Arrival Delays', color='blue', alpha=0.7)\n",
        "plt.bar(x + width/2, monthly_delays['departure_delays'],\n",
        "         width=width, label='Departure Delays', color='red', alpha=0.7)\n",
        "plt.ticklabel_format(style='plain', axis='y')\n",
        "plt.ylim(6000, 16000)\n",
        "plt.xlabel('Month')\n",
        "plt.ylabel('Number of Delays')\n",
        "plt.title('Total montly Flight Delays')\n",
        "plt.xticks(ticks=range(1, 13))  # 1~12월 표시\n",
        "plt.legend()\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "f0299a5c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- 지연횟수가 가장 많은 달 : 12월\n",
        "- 지연횟수가 많은 구간=6~8월\n",
        "- **뉴욕공항의 지연은 12월과 여름철(6~8월)에 가장 빈번**\n",
        "---\n",
        "\n",
        "## 1-2 지연 출발·도착과 날씨의 관계\n",
        "월별 지연 횟수와 기상 요인  \n",
        "[온도, 풍속, 습도]의 상관관계 분석\n"
      ],
      "id": "1a654ad3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| eval: true\n",
        "# flights, weather 두 데이터 프레임 merge 후 사용할 컬럼만 picked2 로 변환[온도, 풍속, 습도]\n",
        "#weather데이터 확인 \n",
        "weather.info()\n",
        "merged=pd.merge(flights, weather, how='inner')\n",
        "picked2=merged[['temp','wind_speed','humid','time_hour']]\n",
        "#picked2['time_hour']의 형식 변환 [object에서datetime64로 ]\n",
        "picked2['time_hour'] = pd.to_datetime(picked2['time_hour'])\n",
        "# 월정보 추출\n",
        "picked2['month'] = picked2['time_hour'].dt.month\n",
        "#월별 평균 기온, 풍속, 습도 측정\n",
        "weather_inf=picked2.groupby('month')[['temp','wind_speed','humid']].mean(numeric_only=True).reset_index()\n",
        "# 섭씨로 변환\n",
        "def celsius(fahrenheit):\n",
        "    return (fahrenheit - 32) * 5/9\n",
        "weather_inf['temp'] = weather_inf['temp'].apply(celsius)\n",
        "print(weather_inf)"
      ],
      "id": "b3945058",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "---"
      ],
      "id": "096e0254"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 도식화"
      ],
      "id": "cbf91576"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| eval: true\n",
        "#각 해당그래프 출력\n",
        "plt.figure(figsize=(8, 4))\n",
        "plt.plot(weather_inf['month'],weather_inf['temp'],\n",
        "         label='temp', color='black', alpha=0.7)\n",
        "plt.plot(weather_inf['month'],weather_inf['humid'],\n",
        "         label='humid', color='blue', alpha=0.7)\n",
        "plt.plot(weather_inf['month'],weather_inf['wind_speed'],\n",
        "         label='wind_speed', color='green', alpha=0.7)\n",
        "plt.xlabel('Month')\n",
        "plt.ylabel('Weather_Data')\n",
        "plt.title('Montly Weather Info')\n",
        "plt.xticks(ticks=range(1, 13))  # 1~12월 표시\n",
        "plt.legend()\n",
        "plt.grid(axis='both', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "ac9c6aea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## 두 그래프 비교\n",
        "<div style=\"display: flex;\">\n",
        "  <div style=\"flex: 60%;\">"
      ],
      "id": "47c71a55"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| eval: true\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# 두 개의 그래프를 위아래로 배치\n",
        "fig, ax = plt.subplots(2, 1, figsize=(6, 6))  # 2개의 행으로 그래프 배치\n",
        "# 첫 번째 그래프 (위쪽): 날씨 정보 그래프\n",
        "ax[0].plot(weather_inf['month'], weather_inf['temp'], label='temp', color='black', alpha=0.7)\n",
        "ax[0].plot(weather_inf['month'], weather_inf['humid'], label='humid', color='blue', alpha=0.7)\n",
        "ax[0].plot(weather_inf['month'], weather_inf['wind_speed'], label='wind_speed', color='green', alpha=0.7)\n",
        "ax[0].set_xlabel('Month')\n",
        "ax[0].set_ylabel('Weather Data')\n",
        "ax[0].set_title('Monthly Weather Info')\n",
        "ax[0].set_xticks(range(1, 13))  # 1~12월 표시\n",
        "ax[0].legend()\n",
        "ax[0].grid(axis='both', linestyle='--', alpha=0.7)\n",
        "# 두 번째 그래프 (아래쪽): 도착 및 출발 지연 그래프\n",
        "ax[1].bar(x - width / 2, monthly_delays['arrival_delays'], width=width, label='Arrival Delays', color='blue', alpha=0.7)\n",
        "ax[1].bar(x + width / 2, monthly_delays['departure_delays'], width=width, label='Departure Delays', color='red', alpha=0.7)\n",
        "ax[1].set_xlabel('Month')\n",
        "ax[1].set_ylabel('Number of Delays')\n",
        "ax[1].set_title('Monthly Flight Delays')\n",
        "ax[1].set_xticks(range(1, 13))  # 1~12월 표시\n",
        "ax[1].legend()\n",
        "ax[1].grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7d764d5d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</div>\n",
        "\n",
        "<div style=\"flex: 50%; font-size: 45px;\">\n",
        "    풍속\n",
        "    상관관계 미미\n",
        "    \n",
        "    습도\n",
        "    여름,겨울 습도 높음\n",
        "    →지연과 높은 상관\n",
        "    \n",
        "    온도\n",
        "    지연이 많은 6, 7, 8, 12월\n",
        "    온도 편차 증가→상관관계 있음\n",
        "  </div>\n",
        "</div>\n",
        "\n",
        "---\n",
        "\n",
        " **part2**\n",
        "<br>\n",
        "<br>\n",
        "2-1 바람 세기가 출발 지연에 영향을 미칠까? 그럼 바람 세기가 도착 지연에는 영향을 미칠까?\n",
        "2-2 바람세기에 따라 출발지연과 도착지연 비교\n",
        "2-3 그렇다면 바람 세기가 35m/s가 넘는다면 결항 비율이 높을까?\n",
        "\n",
        "## 바람 세기가 출발 지연에 영향을 미칠까?\n"
      ],
      "id": "189376ee"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| eval: true\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from nycflights13 import flights, weather\n",
        "## 1. 바람 세기, 출발 지연시간 비교\n",
        "tem = weather[['time_hour','wind_speed']]\n",
        "pt = flights[['time_hour','dep_delay']]\n",
        "# 두 데이터프레임을 time_hour을 기준으로 병합\n",
        "tempt = pd.merge(tem,pt,how = 'inner')\n",
        "#데이터프레임의 인덱스를 초기화하여 기본 인덱스로\n",
        "teempt = tempt.reset_index()\n",
        "#바람세기 구간 설정\n",
        "bins = np.arange(0, teempt['wind_speed'].max() + 5, 5)\n",
        "#구간화\n",
        "teempt['wind_bin'] = pd.cut(teempt['wind_speed'], bins=bins, right=False)\n",
        "#구간 지정 기준으로 데이터를 묶어 출발지연시간의 평균 \n",
        "grouped = teempt.groupby('wind_bin')['dep_delay'].mean()\n",
        "#데이터프레임으로 변환\n",
        "df_grouped = grouped.to_frame().reset_index()\n",
        "# 열 이름 지정\n",
        "df_grouped.columns = ['wind_bin', 'dep_delay']  \n",
        "# 구간을 문자열로 변환\n",
        "df_grouped['wind_bin_str'] = df_grouped['wind_bin'].astype(str)\n",
        "# 막대그래프 그리기 (Matplotlib)\n",
        "bars = plt.bar(df_grouped['wind_bin_str'], df_grouped['dep_delay'], color='thistle')\n",
        "bars[6].set_color('red')\n",
        "plt.xlabel(\"Wind Bin (String)\")\n",
        "plt.ylabel(\"Dep Delay\")\n",
        "plt.title(\"Wind Bin vs Dep Delay\")\n",
        "plt.xticks(rotation=45) \n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "3fc1c5cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "바람세기가 30~ 35m/s일때 출발 지연이 가장 높게 나타나고<br>\n",
        "오히려 35m/s를 넘으면 적게 나타나는 걸로 보여 지연이 되다못해 결항되는 것으로 추정함.\n",
        "\n",
        "## 그럼 바람 세기가 도착 지연에는 영향을 미칠까?"
      ],
      "id": "b825c0e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| eval: true\n",
        "## 2. 바람 세기, 도착 지연시간 비교\n",
        "arr = weather[['time_hour','wind_speed']]\n",
        "ival = flights[['time_hour','arr_delay']]\n",
        "# 두 데이터프레임을 time_hour을 기준으로 병합\n",
        "arrival = pd.merge(arr,ival,how = 'inner')\n",
        "#데이터프레임의 인덱스를 초기화하여 기본 인덱스로\n",
        "arival = arrival.reset_index()\n",
        "\n",
        "#동일한 바람세기 기준으로 데이터를 묶어 도착지연시간의 평균 \n",
        "arv = arival.groupby('wind_speed')['arr_delay'].mean()\n",
        "arv\n",
        "#데이터프레임으로 변환\n",
        "aarv =arv.to_frame().reset_index()\n",
        "#바람세기 구간 설정\n",
        "bins = np.arange(0, aarv['wind_speed'].max() + 5, 5)\n",
        "#구간화\n",
        "aarv['wind_bin'] = pd.cut(aarv['wind_speed'], bins=bins, right=False)\n",
        "#구간 지정 기준으로 데이터를 묶어 도착착지연시간의 평균 \n",
        "arvgroup = aarv.groupby('wind_bin')['arr_delay'].mean()\n",
        "#데이터프레임으로 변환\n",
        "arvgroup = arvgroup.to_frame().reset_index()\n",
        "# 열 이름 지정\n",
        "arvgroup.columns = ['wind_bin', 'arr_delay'] \n",
        "# 구간을 문자열로 변환\n",
        "arvgroup['wind_bin_str'] = arvgroup['wind_bin'].astype(str)\n",
        "# 막대그래프 그리기 (Matplotlib)\n",
        "bars = plt.bar(arvgroup['wind_bin_str'],arvgroup['arr_delay'], color='powderblue')\n",
        "bars[6].set_color('blue')\n",
        "plt.xlabel(\"Wind Bin (String)\")\n",
        "plt.ylabel(\"Dep Delay\")\n",
        "plt.title(\"Wind Bin vs Dep Delay\")\n",
        "# 라벨이 겹치지 않도록 회전\n",
        "plt.xticks(rotation=45)  \n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "e89fce5f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "도착 지연 역시 바람세기가 30~ 35m/s일때 가장 높게 나타나고<br> 35m/s를 넘으면 적게 나타나는 걸로 보여 지연이 되다못해 결항되어 적게 나타나는 것으로 추정함.\n",
        "## 바람세기에 따라 출발지연과 도착지연 비교"
      ],
      "id": "d04eabc5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| eval: true\n",
        "#막대 두개 합치기\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "# x축 라벨\n",
        "labels = df_grouped['wind_bin_str']   \n",
        "val1 = df_grouped['dep_delay']\n",
        "val2 = arvgroup['arr_delay']\n",
        "# x축 좌표\n",
        "x = np.arange(len(labels))    \n",
        "# 막대 너비\n",
        "width = 0.4                   \n",
        "# 막대그래프\n",
        "bars = plt.bar(x - width/2, val1, width=width, label='dep_delay', color='thistle')\n",
        "bars[6].set_color('red')\n",
        "bars = plt.bar(x + width/2, val2, width=width, label='arr_delay', color='powderblue')\n",
        "bars[6].set_color('blue')\n",
        " # x축 위치에 labels 표시\n",
        "plt.xticks(x, labels,rotation = 45)        \n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "41b7dc7b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "바람 세기에 따라 출발 지연과 도착 지연을 비교했더니 <br>\n",
        "출발 지연이 도착 지연보다 더 많은 영향을 받는 것으로 나타났으나<br> 40m/s 이후엔 도착 지연이\n",
        "더 큰 영향을 받은 것으로 나타남\n",
        "\n",
        "## 그렇다면 바람 세기가 35m/s가 넘는다면 결항 비율이 높을까?"
      ],
      "id": "1e95bfe1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| eval: true\n",
        "# 결항 여부를 새로운 열로 만들기: dep_time이 NaN이면 결항(True), 아니면 운항(False)\n",
        "flights['cancelled'] = flights['dep_time'].isna()\n",
        "de = weather[['time_hour','wind_speed']]\n",
        "lay = flights[['time_hour','cancelled','dep_delay']]\n",
        "delay = pd.merge(de,lay,how = 'inner')\n",
        "bins = np.arange(0, delay['wind_speed'].max() + 5, 5)\n",
        "delay[\"wind_bin\"] = pd.cut(delay['wind_speed'], bins=[0, 5, 10, 15, 20, 30, 50], \n",
        "                             labels=[\"0-5\", \"5-10\", \"10-15\", \"15-20\", \"20-30\", \"30+\"])\n",
        "# 바람 구간별 결항 편수\n",
        "cancelled_count = delay.groupby('wind_bin')['cancelled'].sum()\n",
        "#해당 바람 구간에 속하는 모든 항공편(결항이든 아니든)의 건수\n",
        "total_count = delay.groupby('wind_bin')['cancelled'].count()\n",
        "#각 바람 구간에서 결항 건수 / 전체 운항 건수, 100을 곱해 **결항률(%)**\n",
        "cancelled_rate = (cancelled_count / total_count) * 100\n",
        "cancelled_rate2 = cancelled_rate.to_frame().reset_index()\n",
        "cancelled_rate2['wind_bin_str'] = cancelled_rate2['wind_bin'].astype(str)\n",
        "import matplotlib.pyplot as plt\n",
        "bars = plt.bar(cancelled_rate2['wind_bin_str'], \n",
        "               cancelled_rate2['cancelled'], \n",
        "               width=width, label='arr_delay', color='tomato')\n",
        "bars[5].set_color('green')\n",
        "plt.ylabel(\"dep_delay(%)\")\n",
        "plt.xlabel(\"wind_speed\")\n",
        "plt.title(\"wind_speed vs dep_delay\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "id": "89c042a8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "35m/s이 넘으면 결항 비율이 계속해서 높아질 줄 알았으나<br> 40m/s에는 확 줄어드는 걸로 보아\n",
        "바람 세기가 높아질수록 결항비율이 높아진다고 보기도 힘듦."
      ],
      "id": "83b4293a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}